<?php
// $Id$
/**
 * @file
 * kleosis Classes Module
 *
 * Provides basic functionality to maintain classes in Kleosis
 *
 *
*/

$kleosispath = drupal_get_path('module', 'kleosis');
$libpath = $kleosispath . '/includes/kleosis_lib.inc';
require_once ($libpath);

/**
 * Implements hook_node_info().
 * (this is optional as this info now originates in classes.install)
 */
function classes_node_info() {
  return array(
    'class' => array(
      'name' => t('Class'),
      'module' => 'classes',
      'base' => 'node_content',
      'description' => t('Basic info for a class created in Kleosis'),
      'has_title' => 1,
      'title_label' => t('Class Name'),
      'help' => t('Provides class info for a class created in Kleosis'),
      'promote' => 0,
      'status' => 1,
      'comment' => 0,
    )
  );
}

/**
 * Implements hook_menu().
 *
 */
function classes_menu() {
  $items = array();

  //Create a menu item on the Kleosis menu
  $items['kleosis/classes'] = array(
    'title' => 'Classes',
    'description' => 'List the Classes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kleosis_classes_list_form'),
    'access callback' => TRUE,
    'expanded' => TRUE,
    'weight' => 5,
    'menu_name' => 'kleosismm',
  );
  $items['kleosis/classes/default'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Classes List',
    'weight' => 1,
  );

  $items['kleosis/classes/details/%ks_class_nid'] = array(
    'description' => 'Display a new node',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('kleosis_class_view'),
    'page callback' => 'kleosis_class_view',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'title' => 'Class Details',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['kleosis/classes/create'] = array(
    'title' => 'Add a Class',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kleosis_create_class_form'),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  $items['kleosis/classes/students'] = array(
    'description' => 'Display students in a class',
    'page callback' => 'kleosis_class_students',
    'access arguments' => array('access content'),
    'title' => 'Class Students',
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );

  $items['kleosis/classes/schedule'] = array(
    'title' => 'Class Schedule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kleosis_class_schedule_view_form'),
    'file' => '../../includes/forms/kleosis_class_schedule_view_form.inc',
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );
  $items['kleosis/classes/schedule/default'] = array(
    'title' => 'View Schedule',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['kleosis/classes/schedule/edit'] = array(
    'description' => 'Edit the period schedule for the selected class',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kleosis_class_schedule_edit_form'),
    'file' => '../../includes/forms/kleosis_class_schedule_edit_form.inc',
    'access callback' => TRUE,
    'title' => 'Edit Schedule',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['kleosis/classes/schedule/create'] = array(
    'description' => 'Add a period schedule for a class',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kleosis_class_schedule_create_form'),
    'file' => '../../includes/forms/kleosis_class_schedule_create_form.inc',
    'access callback' => TRUE,
    'title' => 'Add Schedule',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['kleosis/classes/schedule/delete'] = array(
    'title' => 'Delete Schedule Periods',
    'description' => 'Delete from the period schedule for the selected class',
    'page callback' => 'kleosis_class_schedule_delete_page',
    'file' => '../../includes/forms/kleosis_class_schedule_edit_form.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'weight' => 3,
  );

  return $items;
}

/**
 * Render a filtered list of Classes.
 *
 * Returned form has a filter form and a list of courses
 *
 */
function kleosis_classes_list_form() {

  // Set Breadcrumbs
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), 'kleosis');
  $breadcrumb[] = t('Classes List');

  drupal_set_breadcrumb($breadcrumb);

  $build['course_filter'] = kleosis_class_course_filter_form();
  $build['class_filter'] = kleosis_classes_filter_form();
  $build['#submit'][] = 'kleosis_classes_filter_form_submit';
  $build['list'] = kleosis_classes_list();

  return $build;
}
/**
 *
 * Classes filters form - filters by course
 *
 */

function kleosis_class_course_filter_form() {

  // get the course value from the session variable (if any) and set the default value accordingly
  $course_from_filter = isset($_SESSION['ks_course_filter']['course']) ? $_SESSION['ks_course_filter']['course'] : 0;
  $course_name_from_filter = isset($_SESSION['ks_course_filter']['course_name']) ? $_SESSION['ks_course_filter']['course_name'] : 'All';

  $sql = 'SELECT nid, title FROM {node} n WHERE n.type = :type AND n.status = :status ORDER BY n.title' ;
  $results = db_query($sql, array(':type' => 'course', ':status' => 1,) );
  $options = array('all' => 'All',);
  foreach ($results as $course) {
    $options[$course->nid] = $course->title;
  }
//dpm($options);
  // create a fieldset with the course name
  $form['course_filter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Course filter - Course: ') . $course_name_from_filter,
    '#weight' => -10,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
$form['course_filter']['course'] = array(
  '#type' => 'select',
    '#title' => t('Course'),
    '#options' =>  $options,
    '#default_value' => $course_from_filter,
    '#weight' => 10,
    '#prefix' => '<div style="float: left;width:240px" >',
    '#suffix' => '</div>',
  );
  $form['course_filter']['apply'] = array(
    '#type' => 'submit',
    '#value' => t('Apply'),
    '#weight' => '10',
    '#prefix' => '<div style="float: right;width:200px" >',
    '#suffix' => '</div>',
  );

  return $form;
}
/**
 *
 * Classes filters form - filters by class title and nid
 *
 */

function kleosis_classes_filter_form() {

  // get the filter values from the session variable (if any) and set the default values accordingly
  $class_field = isset($_SESSION['ks_class_filter']['field']) ? $_SESSION['ks_class_filter']['field'] : '';
  $class_oper = isset($_SESSION['ks_class_filter']['oper']) ? $_SESSION['ks_class_filter']['oper'] : '';
  $class_operand = isset($_SESSION['ks_class_filter']['operand']) ? $_SESSION['ks_class_filter']['operand'] : '';
  $class_academic_year = isset($_SESSION['ks_class_filter']['academic_year']) ? $_SESSION['ks_class_filter']['academic_year'] : 'all';
  $class_term = isset($_SESSION['ks_class_filter']['term']) ? $_SESSION['ks_class_filter']['term'] : 'all';
//  $class_gradelevel = isset($_SESSION['ks_class_filter']['gradelevel']) ? $_SESSION['ks_class_filter']['gradelevel'] : 'all';

  // create a fieldset with search elements
  $form['searchfield'] = array(
    '#type' => 'fieldset',
    '#title' => t('Classes filter'),
    '#weight' => -10,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['searchfield']['field'] = array(
    '#type' => 'select',
    '#title' => t('Where'),
    '#options' =>  ks_fill_search_class_fields(),
    '#default_value' => !empty($class_field) ? $class_field : 'class_field_1',
    '#weight' => 1,
    '#prefix' => '<div style="float: left;width:130px" >',
    '#suffix' => '</div>',
  );
  $form['searchfield']['oper'] = array(
  '#type' => 'select',
    '#title' => t('Operator'),
    '#options' =>  array('is' => t('is'), 'like' => t('like')),
    '#default_value' => !empty($class_oper) ? $class_oper : 'is',
    '#weight' => 5,
    '#prefix' => '<div style="float: left;width:80px" >',
    '#suffix' => '</div>',
  );
  $form['searchfield']['operand'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter value'),
    '#size' => 35,
//    '#maxlength' => 30,
    '#default_value' => !empty($class_operand) ? $class_operand : '',
    '#weight' => 7,
    '#prefix' => '<div style="float: left;width:300px" >',
    '#suffix' => '</div>',
  );

  $form['searchfield']['academic_year'] = array(
    '#type' => 'select',
    '#title' => t('Academic Year'),
    '#options' =>  kleosis_academic_year_values(),
    '#default_value' =>  !empty($class_academic_year) ? $class_academic_year : 'all',
    '#weight' => 9,
    '#prefix' => '<div style="float: left;width:130px" >',
    '#suffix' => '</div>',
  );
  $form['searchfield']['term'] = array(
    '#type' => 'select',
    '#title' => t('Term'),
    '#options' => array('all' => t('All')) + kleosis_academic_term_values(),
    '#default_value' => !empty($class_term) ? $class_term : 'fy',
    '#weight' => 11,
    '#prefix' => '<div style="float: left;width:80px" >',
    '#suffix' => '</div>',
  );
/*
$form['searchfield']['gradelevel'] = array(
    '#type' => 'select',
    '#title' => t('Gradelevel'),
    '#options' =>  kleosis_gradelevel_values(),
    '#default_value' =>  !empty($class_gradelevel) ? $class_gradelevel : 'all',
    '#weight' => 12,
    '#prefix' => '<div style="float: left;width:120px" >',
    '#suffix' => '</div>',
  );
*/
  $form['searchfield']['search'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#weight' => 15,
    '#prefix' => '<div style="float: left;clear:left;width:100px" >',
    '#suffix' => '</div>',
  );

  $form['searchfield']['clear'] = array(
    '#type' => 'submit',
    '#value' => t('Clear'),
    '#weight' => 16,
    '#prefix' => '<div style="float: left;width:100px" >',
    '#suffix' => '</div>',
  );

  return $form;
}

/**
 * Fill the searchfield select box for the Classes List form
 *
 * @return
 *    An array of items to select
 */
function ks_fill_search_class_fields() {

  $le_array = array(
    'title' => t('Class Name'),
//    'gradelevel' => t('Gradelevel'),
  );
  return $le_array;
}

/**
 * Fill the Update options select box for the Students List form
 *  - this is sample code for further development, not currently used...
 *
 * @return
 *    An array of items to select
 */
function class_fill_updateoptions_items() {

  $op_array = array(
    'operation1' => t('Operation 1'),
    'operation2' => t('Operation 2'),
    'operation3' => t('Operation 3'),
  );
  return $op_array;
}

/**
 * Provides a list of Classes in a Table
 *
 */

function kleosis_classes_list() {

drupal_set_title(t('Classes List'));

  $form = array();

  // get the filter values from the session variable (if any) and set the default values accordingly
  $class_field = isset($_SESSION['ks_class_filter']['field']) ? $_SESSION['ks_class_filter']['field'] : '';
  $class_oper = isset($_SESSION['ks_class_filter']['oper']) ? $_SESSION['ks_class_filter']['oper'] : '';
  $class_operand = isset($_SESSION['ks_class_filter']['operand']) ? $_SESSION['ks_class_filter']['operand'] : '';

  $class_academic_year = isset($_SESSION['ks_class_filter']['academic_year']) ? $_SESSION['ks_class_filter']['academic_year'] : 'all';
  $class_term = isset($_SESSION['ks_class_filter']['term']) ? $_SESSION['ks_class_filter']['term'] : 'all';
//  $class_gradelevel = isset($_SESSION['ks_class_filter']['gradelevel']) ? $_SESSION['ks_class_filter']['gradelevel'] : 'all';

  $course_from_filter = isset($_SESSION['ks_course_filter']['course']) ? $_SESSION['ks_course_filter']['course'] : 'all';

  // create another fieldset for multiple update options (tbd...)
/*
  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update options'),
    '#attributes' => array('class' => array('container-inline')),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => -5,
  );
  $form['options']['operation'] = array(
    '#type' => 'select',
    '#title' => t('Operation'),
    '#title_display' => 'invisible',
    '#options' => class_fill_updateoptions_items(),
    '#default_value' => '',
  );
  $options = array();
  $form['options']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
    '#submit' => array('kleosis_class_list_submit'),
  );
*/
  // the header contains all the fields that will be displayed in the tableselect list
  $header = array(
    'title' => array('data' => t('Class Name'), 'field' => 'nn.title'),
    'class_academic_year' => array('data' => t('Academic Year')),
    'class_term' => array('data' => t('Term')),
//    'class_gradelevel' => array('data' => t('Gradelevel')),
    'class_status' => array('data' => t('Status')),
    'operations' => array('data' => t('Ops')),
  );

  $query = db_select('node', 'nn');
  $query->addField('nn', 'nid');
  $query->condition('nn.' . 'type', 'class', '=');
  $query->condition('nn.' . 'status', 1, '=');

  // adjust the query according to the filter values
  if ( (!empty($class_operand)) )  {
    if ($class_oper == 'is') {
       $query->condition('nn.' . $class_field, $class_operand, '=');
    }
    else{
        $query->condition('nn.' . $class_field, $class_operand . '%', 'like');
    }
  }

  if ( ($course_from_filter == 'all') && ( ($class_academic_year == 'all')  &&  ($class_term == 'all') )  ) {    // hmmm, this is not pretty...
    $query = $query->extend('PagerDefault')->limit(variable_get('kleosis_pager_rows', 16));
  }
  $query = $query->extend('TableSort');
  $query->orderByHeader($header);
  $results = $query->execute()->fetchAll();

    /*
      $sql = 'SELECT nid FROM {node} nn WHERE nn.type = :type AND nn.status = :status';
      $results = db_query($sql,
        array(
          ':type' => 'class',
          ':status' => 1,
        )
      );
     */
  // Loop through each of the class nodes and obtain relevant fields
  $options = array();

  foreach ($results as $row) {
    $node = node_load($row->nid);
//    dpm($node);
    // get the course fields in preparation for applying the organizational filter:
    $node_course_ref =   $node->ks_class_course_ref['und'][0]['nid'];
//    $node_gradelevel =   $node->ks_class_gradelevel['und'][0]['value'];
    $node_academic_year =   $node->ks_class_academic_year['und'][0]['value'];
    $node_term =   $node->ks_class_term['und'][0]['value'];

    if ( ($node_course_ref == $course_from_filter) || ($course_from_filter == 'all') ) { // iff course
      if ( ($node_academic_year == $class_academic_year) || ($class_academic_year == 'all') ) { // iff year
       if ( ($node_term == $class_term) || ($class_term == 'all') ) { // iff term
//        if ( ($node_gradelevel == $class_gradelevel) || ($class_gradelevel == 'all') ) { // iff gradelevel

      $options[$row->nid] = array(
//        'title' => $node->title,
        'title' => l($node->title, 'kleosis/classes/details/' . $row->nid, array('query' => array('ksop' => 'view', 'destination' => 'kleosis/classes'))),
        'class_academic_year' => $node->ks_class_academic_year['und'][0]['value'],
        'class_term' => $node->ks_class_term['und'][0]['value'],
//        'class_gradelevel' => $node->ks_class_gradelevel['und'][0]['value'],
        'class_status' => $node->ks_class_status['und'][0]['value'],
//        'operations' =>  l(t('view'), 'kleosis/classes/details/' . $row->nid, array('query' => array('ksop' => 'view', 'destination' => 'kleosis/classes'))) . ' | ' . l(t('edit'), 'kleosis/classes/details/' . $row->nid, array('query' => array('ksop' => 'edit', 'destination' => 'kleosis/classes'))),
        'operations' => l(t('edit'), 'kleosis/classes/details/' . $row->nid, array('query' => array('ksop' => 'edit', 'destination' => 'kleosis/classes'))),
        );

//          } // iff gradelevel
        } // iff term
      } // iff year
    } // iff course
  }

  $build = array();

  $build['class'] = array(
      '#type' => 'table',       // used for table
//      '#type' => 'tableselect',   // used for tableselect
      '#theme' => 'table',      // used only for table
      '#header' => $header,
//      '#options' => $options,     // used for tableselect
        '#rows' => $options,      // used for table
      '#empty' => t('No classes are defined for the selected filter values.'),
      '#multiple' => TRUE,
      '#js_select' => TRUE,
    );
  $build['pager'] = array('#markup' => theme('pager'));

return $build;

}

/**
 *
 * Implements hook_node_validate().
 *
 */
function classes_node_validate($node, $form, &$form_state) {

  if ($node->type == 'class') {
    if( !isset($form_state['values']['ks_class_academic_year']['und'][0]['value']) ) {
        form_set_error('classes', t('Please enter the Academic Year.'), $limit_validation_errors = NULL);
      }
    if( !isset($form_state['values']['ks_class_term']['und'][0]['value']) ) {
        form_set_error('classes', t('Please enter the term.'), $limit_validation_errors = NULL);
      }
    if( !isset($form_state['values']['ks_class_status']['und'][0]['value']) ) {
        form_set_error('classes', t('Please enter the Class status.'), $limit_validation_errors = NULL);
      }
    if( empty($form_state['values']['ks_class_course_ref']['und'][0]['nid']) ) {
        form_set_error('classes', t('Please enter a reference Course.'), $limit_validation_errors = NULL);
      }
  }

}

/**
 *
 * Implementation of hook_submit() for the Classes filter form.
 *   - main purpose is to store the selected student, operation, and user into session variables
 *
 */
function kleosis_classes_filter_form_submit($form, &$form_state) {

  switch ($form_state['values']['op']) {

    case 'Clear':
      $_SESSION['ks_class_filter'] = array();
      break;
    case 'Search':
      $_SESSION['ks_class_filter'] = array('field' => $form_state['values']['field'],
                                        'oper' => $form_state['values']['oper'],
                                        'operand' => $form_state['values']['operand'],
                                        'academic_year' => $form_state['values']['academic_year'],
                                        'term' => $form_state['values']['term'],
                                     //   'gradelevel' => $form_state['values']['gradelevel'],
                                        );
      break;
    case 'Apply':
      $_SESSION['ks_course_filter'] = array('course' => $form_state['values']['course'],
                                            'course_name' => $form['course_filter']['course_filter']['course']['#options'][$form_state['values']['course']],
                                        );
      break;
  }

}

/************************************************************************************************/

/**
 * Display or edit a class node
 *
 * @return
 *   Form for the rendered class info or link to create the class node
 */

function kleosis_class_view($callback_arg = '') {

  module_load_include('inc', 'node', 'node.pages');  // needed for the node_add() function

  global $user;
  global $base_root;
  $build = array();

  // Set Breadcrumbs
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), 'kleosis');
  $breadcrumb[] = l(t('Classes'), 'kleosis/classes');
  $breadcrumb[] = t('Class Info');

  drupal_set_breadcrumb($breadcrumb);

  drupal_set_title(t('Class Info'));
  $classid = isset($_SESSION['kleosis_class_selected_class']['classid']) ? $_SESSION['kleosis_class_selected_class']['classid'] : 0;
  $nid = (arg(3) && arg(3) <> 1 ) ? (arg(3)): $classid;
//  if ($nid && ($nid <> 1) ) {  // if nid id is passed, then look up the class node and display it
  if ($nid) {  // if nid id is passed, then look up the class node and display it
    $node = node_load($nid);
    if(  !empty($node)  ) {
      $ksop = isset($_GET['ksop']) ? $_GET['ksop'] : '';
        // set the session variable for access by the other tabs
      $_SESSION['kleosis_class_selected_class'] = array('classid' => $node->nid,
                                      'classname' => $node->title,
                                      );
      if ($ksop == 'edit') {
        $build['node_edit'] = node_page_edit($node);
      }
      else {
        $build['node_display'] = node_view($node);
      }
    }
    else {
      $build['node_not_exists'] = array(
      '#type' => 'markup',
      '#markup' => '<p><br/>' . t('This class does not exist or cannot be found - please select another.') . '</p>',
      );
    }
  }
  else {  // node argument does not exist, or is = 1, try again
//    $build['no_node_argument'] = array(
//   '#type' => 'markup',
//   '#markup' => '<p><br/>' . t('Please select a Class Name or edit link from the Class List tab.') . '</p>',
//    );
    drupal_set_message('Please select a Class Name or edit link from the Class List tab.');
    drupal_goto($path = 'kleosis/classes', $options = array());
  }
  return $build;
}

/**
 * Create a class node
 *
 * @return
 *   Node Add form for a class
 */

function kleosis_create_class_form($form, $form_state) {

  global $base_root;
  // check permissions
  global $user;
  if ( !(in_array('administrator', $user->roles))  && !(user_access('administer kleosis classes')) ) {
    drupal_set_message(t("You currently do not have permissions to create classes."));
    $options = array('query' => array('destination' => 'kleosis/students') );
    drupal_goto($_SERVER['HTTP_REFERER'], $options, $http_response_code = 302); // return to calling url
  }

  // Set Breadcrumbs
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), 'kleosis');
  $breadcrumb[] = l(t('Classes'), 'kleosis/classes');
  $breadcrumb[] = t('Create Class');

  drupal_set_breadcrumb($breadcrumb);
  drupal_set_title(t('Create a class'));

  $build = array();

  //$build['the_class'] = node_add('class');  // this throws a form expired error, so do the following::
  $path = 'node/add/' . 'class';   // another technique: redirect to let Drupal launch the node add form
  $options = array('query' => array('destination' => 'kleosis/classes') );
  drupal_goto($path, $options, $http_response_code = 302);

  //return $build;
}

/**
 * Implements hook_form_alter().
 *
 * Set the node reference fields and pre-load the title
 *
 */
function classes_form_alter(&$form, &$form_state, $form_id) {

//dpm('inside classes_form_alter()');

/*
  if( ($form_id == 'classes_node_form') && (!empty($form['#node_edit_form'])) ) {

//dpm($form);

    $elem1 = (isset($form['another_nodes_node_ref'][LANGUAGE_NONE][0])) ? $form['another_nodes_node_ref'][LANGUAGE_NONE][0] : null;
    $elem2 = (isset($form['title']['#default_value'])) ? $form['title']['#default_value'] : null;

    if(arg(3)) { //arg(3) is the uid in the url.

      $title = t('@first_part @name', array('@first_part' => t('Classes info for'), '@name' => ks_class_get_users_name(arg(3))));
      $form['title']['#default_value'] = ($elem2) ? $elem2 : $title;
      $elem1['uid']['#default_value'] = arg(3);
      $form['another_nodes_node_ref'][LANGUAGE_NONE][0] = $elem1;
      }
    else {

      $title = t('Classes info for');
      $form['title']['#default_value'] = ($elem2) ? $elem2 : $title;
    }
  }
 */
}

/**
 *
 * Retrieve the name for a user by user id
 *
 * @param $uid
 *   The user id from arg(1)
 *
 *  return user's name
 */
function ks_class_get_users_name($uid){

  $name = db_query('SELECT name FROM {users} WHERE uid = :uid',
                   array(':uid' => $uid))->fetchField();
  return $name;
}

/**
 *
 *  Provide a non-null parameter replacement for this menu item:
 *    $items['kleosis/classs/details/%class_id'']
 *
 * @param $uarg
 *   The class id from the url (can be null)
 *
 *  return non-null nid
 */
function ks_class_nid_to_arg($uarg){

  $arg3 = arg(3);
  $nid = !empty($uarg) ? $uarg : !empty($arg3) ? $arg3 : 1;

//  if($nid == 1) {  // recursion city...
//    drupal_set_message('Please select a Class Name or edit link from the Class List tab.');
//    drupal_goto('kleosis/classes', array());
//  }

//  $nid = isset($_SESSION['class']['nid']) ? $_SESSION['class']['nid'] : $someid;

  return $nid;
}

/**
 *
 * Implements hook_node_insert().
 *
 */
function classes_node_insert($node) {

//  used primarily when this class module uses a custom table
//  dpm('inside classes_node_insert() - not currently implemented - ' . $node->title);
}

/**
 *
 * Implements hook_node_load().
 *
 */
function classes_node_load($nodes, $types) {

//  used primarily when this class module uses a custom table
//  foreach ($nodes as $node) {
//    dpm($node);
//    dpm('inside classes_node_load() - not currently implemented - ' . $node->title);
//  }
}

/**
 *
 * Implements hook_node_update().
 *
 */
function classes_node_update($node) {

//  used primarily when this class module uses a custom table
//  dpm('inside classes_node_update() - not currently implemented - ' . $node->title);
//  dpm($node);
}

/**
 *
 * Implements hook_node_delete().
 *
 */
function classes_node_delete($node) {

//  used primarily when this class module uses a custom table
//  dpm('inside classes_node_delete() - not currently implemented');
}

/**
 *
 * Implements simple_classes_node_view().
 *
 */
function classes_node_view($node, $view_mode, $langcode) {

//  used primarily when this classes module uses a custom table (in addition to classes_form_alter)
//dpm('inside classes_node_view() - not currently implemented - ' . $node->title);
//dpm($node);
//dpm($view_mode);
}

/**
 * Implements hook_help().
 */

function classes_help($path, $arg) {
  switch ($path) {
    case 'admin/help#classes':
      return "<p>" . t(
        "The Classes module provides a custom node type for classs info about a student.
        You can create new nodes using the <a href='!nodeadd'>node add form</a>.
        Nodes that you create will be displayed here.",
        array('!nodeadd' => url('node/add/class'))
      ) . "</p>";
  }
}

/**
 * Displays the Class Schedule main page
 *
 */
function kleosis_class_schedule_form($form, &$form_state) {

drupal_set_title(t('Class Schedule'));

$page_desc = <<<EOT
    <br/>This is the base page for the Kleosis Class Schedule functions.<br/><br/>
    These functions are currently being developed...<br/><br/>
    <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>
EOT;

// add a fieldset for the page info
$form['pagehelp'] = array(
    '#type' => 'fieldset',
    '#title' => t('Class Schedule'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

$form['pagehelp']['pageinfo'] = array(
    '#markup' => $page_desc,
  );

return $form;
}

/**
 * Displays the students in a class
 *
 */
function kleosis_class_students() {

  // Set Breadcrumbs
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), 'kleosis');
  $breadcrumb[] = l(t('Classes'), 'kleosis/classes');
  $breadcrumb[] = t('Class Students');

  drupal_set_breadcrumb($breadcrumb);
  drupal_set_title(t('Students in a Class'));

  $classname = isset($_SESSION['kleosis_class_selected_class']['classname']) ? $_SESSION['kleosis_class_selected_class']['classname'] : ''  ;
  $classid = isset($_SESSION['kleosis_class_selected_class']['classid']) ? $_SESSION['kleosis_class_selected_class']['classid'] : 0  ;

  if ($classid == 0) {
    drupal_set_message('Please select a Class Name or edit link from the Class List tab.');
    drupal_goto($path = 'kleosis/classes', $options = array());
  }

  $text = t('The following students are enrolled in class: <strong>@class </strong>', array('@class' => $classname));
  $build['theclass'] = array(
      '#markup' => $text,
      '#prefix' => '<br/>',
      '#suffix' => '<br/><br/>',
    );

  // the header contains all the fields that will be displayed in the tableselect list
  $header = array(
    'name' => array('data' => t('Username'), 'field' => 'u.name'),
    'enrol_date' => array('data' => t('Enrol Date'), 'field' => 'ksscc.enrol_date'),
    'remarks' => array('data' => t('Remarks'), 'field' => 'ksscc.remarks'),
    'operations' => array('data' => t('Ops')),
  );


  $query = db_select('ks_student_course_classes', 'ksscc');
  $query->innerJoin('users', 'u', 'u.uid = ksscc.kstu_id_fk');
  $query->addField('u', 'name');
  $query->addField('ksscc', 'kstu_id_fk');
  $query->addField('ksscc', 'enrol_date');
  $query->addField('ksscc', 'remarks');

  $query->condition('ksscc.' . 'kccls_id_fk', $classid, '=');
  $query->isNull('unenrol_date');

  // Only get items 0-1999, for scalability reasons...
  $query->range(0, 2000);

  $query = $query->extend('PagerDefault')->limit(variable_get('kleosis_pager_rows', 16));
  $query = $query->extend('TableSort');
  $query->orderByHeader($header);

//  $query->setCountQuery($count_query); // this breaks the pager...

  $options = array();

  $results = $query->execute()->fetchAll();

  foreach ($results as $student) {
    $options[$student->kstu_id_fk] = array(
      'name' => l($student->name, 'kleosis/students/summary', array('query' => array('ksopid' => $student->kstu_id_fk, 'ksop' => $student->name))),
      'enrol_date' =>  $student->enrol_date,
      'remarks' =>  $student->remarks,
//      'operations' => l(t('edit'), 'kleosis/std/summary/' . $student->drp_uid_fk, array('query' => array('destination' => 'kleosis/students/list')))
//      'operations' =>  l(t('Summary'), 'kleosis/students/summary', array('query' => array('ksopid' => $student->drp_uid_fk, 'ksop' => $student->name)))
      'operations' =>  l(t('Other classes'), 'kleosis/students/classes/enrolled_classes', array('query' => array('ksopid' => $student->kstu_id_fk, 'ksop' => $student->name)))
    );
  }
  $build['students'] = array(
        '#type' => 'table',       // used for table
//        '#type' => 'tableselect',   // used for tableselect
        '#theme' => 'table',      // used only for table
        '#header' => $header,
//        '#options' => $options,   // used for tableselect
        '#rows' => $options,   // used for table
        '#empty' => t('There are no students enrolled in this class.'),
        '#multiple' => TRUE,
        '#js_select' => TRUE,
      );
  $build['pager'] = array('#markup' => theme('pager'));

  return $build;
}
/******************************************************************

 *    Example functions to load list_text type fields (for the Courses module)

/******************************************************************/
/**
 * The allowed values for the lab_type courses field
 *
 * @return
 *    An array of lab_types to select
 */
/*
function kleosis_lab_types_values() {  // todo: these values may be defined in the list (text) field directly

  $le_array = array(
    'standard' => t('Standard'),
    'large' => t('Large'),
    'auditorium' =>t('Auditorium'),
    'lab' => t('Lab'),
    'protected_lab' => t('Protected lab'),
    'temporary' => t('Temporary'),
  );
  return $le_array;
}
*/
/**
 * The allowed values for the program field
 *
 * @return
 *    An array of programs to select
 */
 /*
function kleosis_program_values() {  // todo: these values may be defined in the list (text) field directly

  $le_array = array(
    'english' => t('English'),
    'advanced' => t('Advanced'),
    'language' =>t('Language'),
    'special_needs' => t('Special Needs'),
    'general_academic' => t('General Academic'),
  );
  return $le_array;
}
*/
/**
 * The allowed values for the department field
 *
 * @return
 *    An array of departments to select
 */
 /*
function kleosis_department_values() {  // todo: these values may be defined in the list (text) field directly

  $le_array = array(
    'general' => t('General'),
    'science' => t('Science'),
    'languages' => t('Languages'),
    'art' =>t('Art'),
    'music' => t('Music'),
    'biology' => t('Biology'),
    'mathmetics' => t('Mathematics'),
  );
  return $le_array;
}
*/

/************************************************************************************************/
/**
 *
 * Retrieve the Courses node id for a student - currently not used...
 *
 * @param $uid
 *   The user id
 *
 *  return courses node id or FALSE if no id
 */
  /* function courses_get_node_id($uid){

  //  $nid = db_query('SELECT revision_id FROM {field_revision_courses_user_ref} WHERE courses_user_ref_uid = :uid',
  //                   array(':uid' => $uid))->fetchField();
  //  return $nid;
  //  return NULL;
  }
  */
/************************************************************************************************/

