<?php

/**
 * @file
 * Install file for Kleosis classes module.
 *

/**
 * Implements hook_install().
 *
 */
function classes_install() {
  // use get_t() to get the name of the localization function for translation
  // during install,  t() is not available.
  $t = get_t();

  // Define the node type.
  $class = array(
    'type' => 'class',
    'name' => $t('Class'),
    'base' => 'node_content',
//    'base' => 'class',
    'description' => t('Basic info for a class created in Kleosis'),
    'has_title' => 1,
    'title_label' => t('Class Name'),
    'help' => t('Provides class info for a class created in Kleosis'),
    'promote' => 0,
    'status' => 1,
    'comment' => 0,
  );

  // Complete the node type definition by setting any defaults not explicitly declared above.

  $content_type = node_type_set_defaults($class);

  // Save the content type
  node_type_save($content_type);

  variable_set('comment_class', 0);

  // Hide date and author information
  variable_set('node_submitted_class', FALSE);
 //ken--   variable_set('node_submitted_class', 0);

  // Create all the fields that are to be added to the class content type.
  foreach (_class_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for the fields.
  foreach (_class_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $class['type'];
    field_create_instance($instance);
  }
}

/**
 * Implements hook_enable
 */
 /* not yet...
function classes_enable() {

  // Create the Classes Main menu
  if (module_exists('menu')) {
    $menu = array(
      'menu_name' => 'kleosis_classesmm',
      'title' => 'Kleosis Classes Main Menu',
      'description' => t('Kleosis Classes Main Menu'),
    );
    menu_save($menu);
  }
}
*/
/**
 * Returns a structured array defining the fields created by this content type.
 *
 * This is packaged in a function so it can be used in both
 * classes_install() and classes_uninstall().
 *
 * Requires the References Module at http://drupal.org/project/references
 * for the course_ref course_reference field
 *
 */
function _class_installed_fields() {
  $t = get_t();

  return array(


      // node refererence auto complete field (see the instance), referencing a content-type called 'courses'
    'class_course_ref' => array(
      'field_name'  => 'ks_class_course_ref',
      'label'       => $t('Course reference'),
      'cardinality' => 1,
      'type'        => 'node_reference',
      'settings'    => array(
        'referenceable_types'  => array('course'),
      ),
    ),
    'class_section' => array(
      'field_name' => 'ks_class_section',
      'type'        => 'text',
      'description' => $t('Class section'),
      'settings'    => array(
        'max_length' => 128,
      ),
    ),
    // date field (date module required)
    'class_start_end_date' => array(
      'field_name'   => 'ks_class_start_end_date',
      'label'        => $t('Start Date'),
      'cardinality'  => 1,
      'type'         => 'date',
      'settings'    => array(
        'enddate' => TRUE,
        'fromto' => 'both',
        'todate' => 'both',
        'tz_handling' => 'none',
        'granularity' => array('year','month','day', 'hour', 'minute'),
      ),
    ),
    'academic_year' => array(
      'field_name' => 'ks_class_academic_year',
      'type'        => 'list_text',
      'description' => $t('Academic Year for this class'),
      'settings'    => array(
        'allowed_values_function'  => 'kleosis_academic_year_values',
        ),
      ),
    'term' => array(
      'field_name' => 'ks_class_term',
      'type'        => 'list_text',
      'description' => $t('Term for this class'),
      'settings'    => array(
        'allowed_values_function'  => 'kleosis_academic_term_values',
        ),
      ),
    'course_class_type' => array(
      'field_name' => 'ks_class_type',
      'type'        => 'list_text',
      'description' => $t('The type of class'),
      'settings'    => array(
        'allowed_values'  => array(
          'standard' => t('Standard'),
          'large' => t('Large'),
          'night' => t('Night'),
          'weekend' => t('Weekend'),
          'summer' => t('Summer'),
        ),
      ),
    ),
    'class_status' => array(
      'field_name' => 'ks_class_status',
      'type'        => 'list_text',
      'description' => $t('Class Status'),
      'settings'    => array(
        'allowed_values'  => array(
          'active' => t('Active'),
          'rescheduled' => t('Rescheduled'),
          'postponed' => t('Postponed'),
          'cancelled' => t('Cancelled'),
          'other' => t('Other'),
        ),
      ),
    ),
    'class_remarks' => array(
      'field_name' => 'ks_class_remarks',
      'type'        => 'text',
      'cardinality' => 1,
      'label' => $t('Class Remarks'),
      'settings'     => array(
        'max_length'  => 1000,
      ),
    ),
  );
}

/**
 * Returns a structured array defining the instances for this content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "medical_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This is provided as a function so that it can be used in both hook_install()
 * and hook_uninstall().
 */
function _class_installed_instances() {
  $t = get_t();
  return array(

      // instance of the node reference 'course' auto complete field above
    'class_course_ref' => array(
      'field_name'  => 'ks_class_course_ref',
      'label'       => $t('Course reference'),
      'cardinality' => 1,
      'widget'      => array(
        'type'          => 'node_reference_autocomplete',
      ),
    ),
    'class_section' => array(
      'field_name' => 'ks_class_section',
      'label'       => $t('Class section'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
        'size'    => '30',
      ),
    ),
    // instance of the date field above
    'class_start_end_date' => array(
      'field_name'  => 'ks_class_start_end_date',
      'label'       => $t('Start Date'),
      'cardinality' => 1,
      'widget'      => array(
        'type'       => 'date_popup',
        'settings'   => array(
          'input_format' => date_default_format('date_popup'),
          'increment' => 1,
          'year_range' => '-3:+3',
        ),
        'behaviors' => array(
          'multiple values' => FIELD_BEHAVIOR_CUSTOM,
          'default value' => FIELD_BEHAVIOR_CUSTOM,
        ),
      ),
    ),
    'academic_year' => array(
      'field_name' => 'ks_class_academic_year',
      'type'        => 'list_text',
      'label' => $t('Academic Year'),
      'widget'      => array(
        'type'    => 'options_select',
      ),
    ),
    'term' => array(
      'field_name' => 'ks_class_term',
      'type'        => 'list_text',
      'label' => $t('Term'),
      'widget'      => array(
        'type'    => 'options_select',
      ),
    ),
    'course_class_type' => array(
      'field_name' => 'ks_class_type',
      'type'        => 'list_text',
      'label' => $t('The type of class'),
      'widget'      => array(
        'type'    => 'options_select',
      ),
    ),
    'class_status' => array(
      'field_name' => 'ks_class_status',
      'type'        => 'list_text',
      'label' => $t('Class Status'),
      'widget'      => array(
        'type'    => 'options_select',
      ),
    ),
    'class_remarks' => array(
      'field_name' => 'ks_class_remarks',
      'type'        => 'text',
      'cardinality' => 1,
      'label' => $t('Class Remarks'),
      'widget'      => array(
        'type'       => 'text_textarea',
        'settings'   => array('rows' => 4),
      ),
    ),
  );
}


/**
 * Implements hook_uninstall().
 */
function classes_uninstall() {

  /*
  if (module_exists('menu')) {  // delete the kleosis classes main menu
      if ($kleosis_classes_menu = menu_load('kleosis_classesmm')) {
        menu_delete($kleosis_classes_menu);
      }
  }
  */
  // Gather all the example content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'class'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  foreach (array_keys(_class_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the class
  // content type (such as the body field) and delete them individually.
  $instances = field_info_instances('node', 'class');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete the class content type
  node_type_delete('class');

  // Purge all field information
  field_purge_batch(1000);
}

