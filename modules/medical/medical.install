<?php

/**
 * @file
 * Install file for Kleosis medical module.
 *

/**
 * Implements hook_install().
 *
 */
function medical_install() {
  // use get_t() to get the name of the localization function for translation
  // during install,  t() is not available.
  $t = get_t();

  // Define the node type.
  $medical = array(
    'type' => 'medical',
    'name' => $t('Medical'),
    'base' => 'node_content',
//    'base' => 'medical',
    'description' => t('Basic medical info for a student'),
    'has_title' => 1,
    'help' => t('Provide medical info for a student'),
    'promote' => 0,
    'status' => 1,
    'comment' => 0,
  );

  // Complete the node type definition by setting any defaults not explicitly declared above.

  $content_type = node_type_set_defaults($medical);

  // Save the content type
  node_type_save($content_type);

  variable_set('comment_medical', 0);

  // Hide date and author information
  variable_set('node_submitted_medical', FALSE);
 //ken--   variable_set('node_submitted_medical', 0);

  // Create all the fields that are to be added to the medical content type.
  foreach (_medical_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for the fields.
  foreach (_medical_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $medical['type'];
    field_create_instance($instance);
  }
}

/**
 * Implements hook_enable
 */
 /* not yet...
function medical_enable() {

  // Create the Student Main menu
  if (module_exists('menu')) {
    $menu = array(
      'menu_name' => 'kleosis_studentmm',
      'title' => 'Kleosis Student Main Menu',
      'description' => t('Kleosis Student Main Menu'),
    );
    menu_save($menu);
  }
}
*/
/**
 * Returns a structured array defining the fields created by this content type.
 *
 * This is packaged in a function so it can be used in both
 * medical_install() and medical_uninstall().
 *
 * Requires the References Module at http://drupal.org/project/references
 * for the medical_user user_reference field
 *
 */
function _medical_installed_fields() {
  $t = get_t();
  $kleosis_role_ids = array();
  $kleosis_roles = array('student', 'instructor', 'parent_guardian',);  // kleosis roles

  foreach ($kleosis_roles as $kleosis_role) {
    $role = user_role_load_by_name($kleosis_role);
    if ($role) {
        $kleosis_role_ids[(integer)$role->rid] = $role->rid;
    }
  }

  return array(
    'medical_physician' => array(
      'field_name'  => 'ks_med_primary_physician',
      'cardinality' => 1,
      'type'        => 'text',
    ),
    'medical_physician_phone' => array(
      'field_name'  => 'ks_med_primary_physician_phone',
      'cardinality' => 1,
      'type'        => 'text',
    ),
    'medical_emergency_contact' => array(
      'field_name'  => 'ks_med_emergency_contact',
      'cardinality' => 1,
      'type'        => 'text',
    ),
    'medical_emergency_contact_phone' => array(
      'field_name'  => 'ks_med_emergency_contact_phone',
      'cardinality' => 1,
      'type'        => 'text',
    ),
    'medical_remarks' => array(
      'field_name'  => 'ks_medical_remarks',
      'type'        => 'text',
      'cardinality' => 1,
      'label' => $t('Medical Remarks'),
      'settings'     => array(
        'max_length'  => 1000,
      ),
    ),
    'medical_user_ref' => array(
      'field_name'  => 'medical_user_ref',
      'label'       => $t('User name'),
      'cardinality' => 1,
      'type'        => 'user_reference',
      'settings'    => array(
        'referenceable_types'  => array('user'),
        'referenceable_roles'  => $kleosis_role_ids,
        'referenceable_status'  => array(1 => '1'),
      ),
    ),
  );
}

/**
 * Returns a structured array defining the instances for this content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "medical_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This is provided as a function so that it can be used in both hook_install()
 * and hook_uninstall().
 */
function _medical_installed_instances() {
  $t = get_t();
  return array(
    'medical_physician' => array(
      'field_name'  => 'ks_med_primary_physician',
      'label' => $t('Primary physician'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'medical_node_list' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    'medical_physician_phone' => array(
      'field_name'  => 'ks_med_primary_physician_phone',
      'label' => $t('Primary physician phone number'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'medical_node_list' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    'medical_emergency_contact' => array(
      'field_name'  => 'ks_med_emergency_contact',
      'label' => $t('Emergency contact'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'medical_node_list' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    'medical_emergency_contact_phone' => array(
      'field_name'  => 'ks_med_emergency_contact_phone',
      'label' => $t('Emergency contact phone number'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'medical_node_list' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    'medical_remarks' => array(
      'field_name'  => 'ks_medical_remarks',
      'label' => $t('General medical remarks'),
      'type'        => 'text',
      'widget'      => array(
        'type'       => 'text_textarea',
        'settings'   => array('rows' => 2),
      ),
      'display' => array(
        'medical_node_list' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    'medical_user_ref' => array(
      'field_name'  => 'medical_user_ref',
      'label'       => $t('User name'),
      'cardinality' => 1,
      'widget'      => array(
        'type'          => 'user_reference_autocomplete',
      ),
    ),
  );
}

/**
 * Implements hook_schema().
 *
 * Define the custom database tables used by kleosis medical info node
 * @see hook_schema()
 */
function medical_schema() {

  $schema['ks_medical_info'] = array(
    'description' => 'The medical info form',
    'fields' => array(
      'ksmi_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key',
      ),
      'med_nid_fk' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Medical info nid',
      ),
      'med_category' => array(
        'type' => 'int',
        'default' => 0,
        'description' => 'Medical category',
      ),
      'med_subject' => array(
        'type' => 'int',
        'default' => 0,
        'description' => 'Medical subject',
      ),
      'yes_no' => array(
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Yes or no',
      ),
      'description' => array(
        'type' => 'varchar',
        'length' => 1250,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Details of medical info entry',
      ),
    ),
    'primary key' => array('ksmi_id'),
  );

  $schema['ks_medical_category_desc'] = array(
    'description' => 'The medical info categories',
    'fields' => array(
      'ksmedc_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Primary Key',
      ),
      'med_category' => array(
        'type' => 'varchar',
        'length' => 48,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Medical category',
      ),
      'description' => array(
        'type' => 'varchar',
        'length' => 250,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Description for the medical category',
      ),
    ),
    'primary key' => array('ksmedc_id'),
  );

  $schema['ks_medical_subject_desc'] = array(
    'description' => 'The medical info subjects',
    'fields' => array(
      'ksmeds_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Primary Key',
      ),
      'med_subject' => array(
        'type' => 'varchar',
        'length' => 48,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Medical category',
      ),
      'description' => array(
        'type' => 'varchar',
        'length' => 250,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Description for the medical subject',
      ),
    ),
    'primary key' => array('ksmeds_id'),
  );

   return $schema;
}

/**
 * Implements hook_uninstall().
 */
function medical_uninstall() {

  /*
  if (module_exists('menu')) {  // delete the kleosis student main menu
      if ($kleosis_student_menu = menu_load('kleosis_studentmm')) {
        menu_delete($kleosis_student_menu);
      }
  }
  */
  // Gather all the example content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'medical'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  foreach (array_keys(_medical_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the medical
  // content type (such as the body field) and delete them individually.
  $instances = field_info_instances('node', 'medical');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete the medical content type
  node_type_delete('medical');

  // Purge all field information
  field_purge_batch(1000);
}
