<?php

/**
 * @file
 * Install file for Kleosis courses module.
 *

/**
 * Implements hook_install().
 *
 */
function courses_install() {
  // use get_t() to get the name of the localization function for translation
  // during install,  t() is not available.
  $t = get_t();

  // Define the node type.
  $course = array(
    'type' => 'course',
    'name' => $t('Course'),
    'base' => 'node_content',
//    'base' => 'course',
    'description' => $t('Basic info for a course created in Kleosis'),
    'has_title' => 1,
    'title_label' => $t('Course Name'),
    'help' => $t('Provides course info for a course created in Kleosis'),
    'promote' => 0,
    'status' => 1,
    'comment' => 0,
  );

  // Complete the node type definition by setting any defaults not explicitly declared above.

  $content_type = node_type_set_defaults($course);

  // Save the content type
  node_type_save($content_type);

  variable_set('comment_course', 0);

  // Hide date and author information
  variable_set('node_submitted_course', FALSE);
 //ken--   variable_set('node_submitted_course', 0);

  // Create all the fields that are to be added to the course content type.
  foreach (_course_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for the fields.
  foreach (_course_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $course['type'];
    field_create_instance($instance);
  }
}

/**
 * Implements hook_enable
 */
 /* not yet...
function courses_enable() {

  // Create the Courses Main menu
  if (module_exists('menu')) {
    $menu = array(
      'menu_name' => 'kleosis_coursesmm',
      'title' => 'Kleosis Courses Main Menu',
      'description' => t('Kleosis courses Main Menu'),
    );
    menu_save($menu);
  }
}
*/
/**
 * Returns a structured array defining the fields created by this content type.
 *
 * This is packaged in a function so it can be used in both
 * courses_install() and courses_uninstall().
 *
 * Requires the References Module at http://drupal.org/project/references
 * for the courses_user user_reference field
 *
 */
function _course_installed_fields() {
  $t = get_t();

  return array(
    'courseno' => array(
      'field_name'  => 'ks_course_no',
      'type'        => 'text',
      'description' => $t('Course Number'),
      'settings'    => array(
        'max_length' => 128,
      ),
    ),
    'program' => array(
      'field_name' => 'ks_course_program',
      'type'        => 'list_text',
      'description' => $t('Program this course belongs to'),
      'settings'    => array(
        'allowed_values_function'  => 'kleosis_program_values',
        ),
      ),
    'department' => array(
      'field_name' => 'ks_course_department',
      'type'        => 'list_text',
      'description' => $t('Department this course belongs to'),
      'settings'    => array(
        'allowed_values_function'  => 'kleosis_department_values',
        ),
      ),
    'gradelevel' => array(
      'field_name' => 'ks_course_gradelevel',
      'type'        => 'list_text',
      'description' => $t('Grade level for this course'),
      'settings'    => array(
        'allowed_values_function'  => 'kleosis_gradelevel_values',
        ),
      ),
    // date field (date module required)
    'course_creation_date' => array(
      'field_name'   => 'ks_course_creation_date',
      'label'        => $t('Date'),
      'cardinality'  => 1,
      'type'         => 'date',
      'settings'    => array(
        'enddate' => FALSE,
        'tz_handling' => 'none',
        'granularity' => array('year', 'month', 'day'),
      ),
    ),
    'course_type' => array(
      'field_name' => 'ks_course_type',
      'type'        => 'list_text',
      'description' => $t('The type of course'),
      'settings'    => array(
        'allowed_values_function'  => 'kleosis_course_types_values',
        ),
      ),
    'prerequisite' => array(
      'field_name' => 'ks_course_prerequisite',
      'type'        => 'text',
      'description' => $t('Course prerequisite'),
      'settings'    => array(
        'max_length' => 128,
        ),
      ),
    'course_status' => array(
      'field_name' => 'ks_course_status',
      'type'        => 'list_text',
      'description' => $t('Course status'),
      'settings'    => array(
        'allowed_values_function'  => 'kleosis_course_status_values',
        ),
      ),
    'length' => array(
      'field_name' => 'ks_course_length',
      'type'        => 'text',
      'description' => $t('Course length'),
    ),
    'room_type' => array(
      'field_name' => 'ks_course_room_type',
      'type'        => 'list_text',
      'description' => $t('Room type'),
      'settings'    => array(
        'allowed_values_function'  => 'kleosis_room_types_values',
        ),
      ),
    'lab_type' => array(
      'field_name' => 'ks_course_lab_type',
      'type'        => 'list_text',
      'description' => $t('Lab type'),
      'settings'    => array(
        'allowed_values_function'  => 'kleosis_lab_types_values',
        ),
      ),
    'description' => array(
      'field_name' => 'ks_course_description',
      'type'        => 'text',
      'cardinality' => 1,
      'label' => $t('Course description'),
      'settings'     => array(
        'max_length'  => 1000,
      ),
    ),
/*
    'course_grade_weight' => array(
      'field_name' => 'ks_course_grade_weight',
      'type'        => 'number_decimal',
      'description' => $t('Course grade weight'),
       'settings'    => array(
        'precision'  => 6,
        'scale' => 2,
        'decimal_separator' => '.',
      ),
    ),
    'final_exam_weight' => array(
      'field_name' => 'ks_final_exam_weight',
      'type'        => 'number_decimal',
      'description' => $t('Final exam weight'),
       'settings'    => array(
        'precision'  => 6,
        'scale' => 2,
        'decimal_separator' => '.',
      ),
    ),
    'grade_item_a_weight' => array(
      'field_name' => 'ks_grade_item_a_weight',
      'type'        => 'number_decimal',
      'description' => $t('Grade Item A weight'),
       'settings'    => array(
        'precision'  => 6,
        'scale' => 2,
        'decimal_separator' => '.',
      ),
    ),
    'grade_item_b_weight' => array(
      'field_name' => 'ks_grade_item_b_weight',
      'type'        => 'number_decimal',
      'description' => $t('Grade Item B weight'),
       'settings'    => array(
        'precision'  => 6,
        'scale' => 2,
        'decimal_separator' => '.',
      ),
    ),
    'grade_item_c_weight' => array(
      'field_name' => 'ks_grade_item_c_weight',
      'type'        => 'number_decimal',
      'description' => $t('Grade Item C weight'),
       'settings'    => array(
        'precision'  => 6,
        'scale' => 2,
        'decimal_separator' => '.',
      ),
    ),
*/
  );
}

/**
 * Returns a structured array defining the instances for this content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "medical_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This is provided as a function so that it can be used in both hook_install()
 * and hook_uninstall().
 */
function _course_installed_instances() {
  $t = get_t();
  return array(
    'courseno' => array(
      'field_name'  => 'ks_course_no',
      'label' => $t('Course number'),
      'type'        => 'text',
      'required'    => TRUE,
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
    ),
    'program' => array(
      'field_name' => 'ks_course_program',
      'label'       => $t('Course program'),
      'type'        => 'list_text',
      'widget'      => array(
        'type'    => 'options_select',
      ),
    ),
    'department' => array(
      'field_name' => 'ks_course_department',
      'label'       => $t('Course department'),
      'type'        => 'list_text',
      'widget'      => array(
        'type'    => 'options_select',
      ),
    ),
    'gradelevel' => array(
      'field_name' => 'ks_course_gradelevel',
      'type'        => 'list_text',
      'label' => $t('Grade level'),
      'widget'      => array(
        'type'    => 'options_select',
      ),
    ),
    // instance of the date field above
    'course_creation_date' => array(
      'field_name'  => 'ks_course_creation_date',
      'label'       => $t('Creation Date'),
      'cardinality' => 1,
      'widget'      => array(
        'type'       => 'date_popup',
        'settings'   => array(
          'input_format' => date_default_format('date_popup'),
          'increment' => 1,
          'year_range' => '-15:+3',
        ),
        'behaviors' => array(
          'multiple values' => FIELD_BEHAVIOR_CUSTOM,
          'default value' => FIELD_BEHAVIOR_CUSTOM,
        ),
      ),
    ),
    'course_type' => array(
      'field_name' => 'ks_course_type',
      'type'        => 'list_text',
      'label' => $t('Course type'),
      'widget'      => array(
        'type'    => 'options_select',
      ),
    ),
    'prerequisite' => array(
      'field_name' => 'ks_course_prerequisite',
      'label'       => $t('Course prerequisite'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
    ),
    'course_status' => array(
      'field_name' => 'ks_course_status',
      'label'       => $t('Course status'),
      'type'        => 'list_text',
      'widget'      => array(
        'type'    => 'options_select',
      ),
    ),
    'length' => array(
      'field_name' => 'ks_course_length',
      'label'       => $t('Course length'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
    ),
    'room_type' => array(
      'field_name' => 'ks_course_room_type',
      'label'       => $t('Room type'),
      'type'        => 'list_text',
      'widget'      => array(
        'type'    => 'options_select',
      ),
    ),
    'lab_type' => array(
      'field_name' => 'ks_course_lab_type',
      'label'       => $t('Lab type'),
      'type'        => 'list_text',
      'widget'      => array(
        'type'    => 'options_select',
      ),
    ),
    'description' => array(
      'field_name'  => 'ks_course_description',
      'label' => $t('Course description'),
      'type'        => 'text',
      'cardinality' => 1,
      'widget'      => array(
        'type'       => 'text_textarea',
        'settings'   => array('rows' => 4),
      ),
    ),
/*
    'course_grade_weight' => array(
      'field_name' => 'ks_course_grade_weight',
      'type'        => 'number_decimal',
      'label'       => $t('Course Grade weight'),
//      'default_value' => array(array('value' => '75.00')),
      'widget' => array(
        'type' => 'number',
      ),
      'display' => array(
        'default' => array(
          'type' => 'number_decimal',
        ),
      ),
    ),
    'final_exam_weight' => array(
      'field_name' => 'ks_final_exam_weight',
      'type'        => 'number_decimal',
      'label'       => $t('Final Exam weight'),
//      'default_value' => array(array('value' => '25.00')),
      'widget' => array(
        'type' => 'number',
      ),
      'display' => array(
        'default' => array(
          'type' => 'number_decimal',
        ),
      ),
    ),
    'grade_item_a_weight' => array(
      'field_name' => 'ks_grade_item_a_weight',
      'type'        => 'number_decimal',
      'label'       => $t('Grade Item A weight'),
//      'default_value' => array(array('value' => '0.00')),
      'widget' => array(
        'type' => 'number',
      ),
      'display' => array(
        'default' => array(
          'type' => 'number_decimal',
        ),
      ),
    ),
    'grade_item_b_weight' => array(
      'field_name' => 'ks_grade_item_b_weight',
      'type'        => 'number_decimal',
      'label'       => $t('Grade Item B weight'),
//      'default_value' => array(array('value' => '0.00')),
      'widget' => array(
        'type' => 'number',
      ),
      'display' => array(
        'default' => array(
          'type' => 'number_decimal',
        ),
      ),
    ),
    'grade_item_c_weight' => array(
      'field_name' => 'ks_grade_item_c_weight',
      'type'        => 'number_decimal',
      'label'       => $t('Grade Item C weight'),
//      'default_value' => array(array('value' => '0.00')),
      'widget' => array(
        'type' => 'number',
      ),
      'display' => array(
        'default' => array(
          'type' => 'number_decimal',
        ),
      ),
    ),
*/
  );
}


/**
 * Implements hook_uninstall().
 */
function courses_uninstall() {

  /*
  if (module_exists('menu')) {  // delete the kleosis courses main menu
      if ($kleosis_student_menu = menu_load('kleosis_coursesmm')) {
        menu_delete($kleosis_courses_menu);
      }
  }
  */
  // Gather all the example content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'course'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  foreach (array_keys(_course_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the course
  // content type (such as the body field) and delete them individually.
  $instances = field_info_instances('node', 'course');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete the course content type
  node_type_delete('course');

  // Purge all field information
  field_purge_batch(1000);
}

